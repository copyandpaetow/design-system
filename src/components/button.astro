---
interface Props {
	variant?: "primary" | "secondary" | "tertiary" | "none";
}

const { variant = "none" } = Astro.props;
---

<button data-variant={variant}>
	<slot />
</button>

<style>
	button {
		--border-width: 2px;

		position: relative;
		display: grid;
		grid-template-columns: max-content 1fr max-content;
		grid-template-areas: "start-icon content end-icon";
		min-width: 40px;

		background-color: var(--background-color, transparent);
		border: var(--border-width) solid var(--border-color, transparent);
		padding: var(--padding, 4px 12px);
		border-radius: var(--radius, 8px);
		color: var(--color, black);
		z-index: 0;
		font-size: var(--size--1);

		&::before {
			content: "";
			position: absolute;
			inset: calc(var(--border-width) * -1);
			background-color: color-mix(in srgb, var(--background-color), black 33%);
			border-radius: var(--radius, 8px);
			z-index: -1;
			opacity: 0;
		}

		&:where(:hover, :focus-visible)::before {
			opacity: 1;
		}

		&[data-variant="primary"] {
			--background-color: var(--primary-color, blue);
			--border-color: var(--primary-color, blue);
			--color: white;
			--outline-color: var(--primary-color, blue);
		}

		&[data-variant="secondary"] {
			--background-color: var(--secondary-color, transparent);
			--border-color: currentColor;
		}

		&[data-variant="tertiary"] {
			--background-color: var(--tertiary-color, transparent);
		}

		&[data-variant="none"] {
			--padding: 0;
		}

		&:not([data-variant="none"]):where(:active) {
			transform: translateY(2px);
		}

		&[data-variant="none"]::before {
			content: none;
		}
	}
</style>
